#!/bin/bash

  # Error handler - trimite mesaj de eroare cÄƒtre frontend
  error_exit() {
    local error_message="$1"
    echo "INSTALLATION FAILED: $error_message" | tr -d '\n' > /tmp/progress
    echo "ERROR: $error_message" >> /home/liveuser/Desktop/install.log
    exit 1
  }

  trap 'error_exit "Unexpected error at line $LINENO"' ERR

  # Setting usefull variables
  DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
  BASE_PACKAGES=('archlinux-keyring' 'alsa-utils' 'amd-ucode' 'arch-install-scripts' 'b43-fwcutter' 'base' 'bind-tools' 'broadcom-wl' 'btrfs-progs' 'cloud-init' 'crda' 'cryptsetup' 'darkhttpd' 'dhclient' 'dhcpcd' 'diffutils' 'dnsmasq' 'e2fsprogs' 'edk2-shell' 'efibootmgr' 'espeakup' 'ethtool' 'exfatprogs' 'f2fs-tools' 'fatresize' 'fsarchiver' 'openbsd-netcat' 'gpart' 'gpm' 'gptfdisk' 'grml-zsh-config' 'hdparm' 'intel-ucode' 'iwd' 'jfsutils' 'linux617' 'linux-firmware' 'livecd-sounds' 'lsscsi' 'lvm2' 'man-db' 'man-pages' 'mc' 'mdadm' 'memtest86+' 'mkinitcpio' 'mkinitcpio-archiso' 'mkinitcpio-nfs-utils' 'modemmanager' 'mtools' 'nano' 'nbd' 'ndisc6' 'nfs-utils' 'nilfs-utils' 'ntfs-3g' 'nvme-cli' 'parted' 'partimage' 'rp-pppoe' 'rsync' 'sdparm' 'sg3_utils' 'smartmontools' 'sof-firmware' 'sudo' 'syslinux' 'systemd-resolvconf' 'tcpdump' 'testdisk' 'udftools' 'usb_modeswitch' 'usbmuxd' 'usbutils' 'vpnc' 'wireless-regdb' 'wireless_tools' 'wpa_supplicant' 'xfsprogs' 'xl2tpd' 'zsh' 'xorg' 'sddm' 'bash-completion' 'networkmanager' 'linux-headers' 'base-devel' 'git' 'xf86-input-libinput' 'pacman-contrib' 'plasma' 'konsole' 'kate' 'nautilus' 'xdg-user-dirs' 'ark' 'gnome-software' 'appmenu-gtk-module' 'touchegg' 'rhythmbox' 'kvantum' 'pearos-grub-theme' 'pearos-settings' 'python-pip' 'neofetch' 'grub' 'os-prober' 'firefox' 'ttf-roboto' 'gvfs' 'pavucontrol' 'pulseaudio' 'pulseaudio-alsa' 'ttf-dejavu' 'xorg-apps' 'xorg-server' 'kcalc' 'gwenview' 'elisa' 'npm' 'electron')
  UEFI=false
  bluetooth=false
  installed=false
  mounted=false
  architecture=$(lscpu | grep 'Architecture' | awk '{print $2}')
 	#hypervisor=$(systemd-detect-virt)

  # Various settings for the installation process
  KEYMAP="us"
  LOCALE="en_US.UTF-8"
  utc_enabled=false
  ZONE="Europe/Bucharest"
  HOST_NAME="pearOS-live"
  user_passwd="pear"
  root_passwd="pear"
  FULL_NAME="Default User"
  USER_NAME="default"
  SWAP="-"
  swap_enabled=false
  block_devices=()
  PARTITION_LAYOUT="Basic"
  FILE_SYSTEM="ext4"
  DISK="$1"
  PREFIX=""
  multilib=true
  DESKTOP="None"
  DESKTOP_PACKAGES+=("${DESKTOP_DEFAULTS[@]}")
  DESKTOP_PACKAGES+=('plasma-nm')

  # Helper function to update progress (0-100)
  update_progress() {
    local progress="$1"
    echo "$progress" | tr -d '\n' > /tmp/progress
  }

  # Set/load the US keymap
  localectl set-keymap "$KEYMAP"
  loadkeys "$KEYMAP"
  update_progress "3"

  # Check if the system is UEFI or legacy
  if [ -d /sys/firmware/efi ]; then
    UEFI=true
  fi

  # Check if the system has bluetooth or not
  if lsusb | grep -i bluetooth || lspci | grep -i bluetooth; then
    bluetooth=true
  fi

  # Simple fix for the NVME drives. They are named differently than /dev/sda1 for example
  if [[ "$DISK" == *"nvme"* ]]; then
          PREFIX="p"
  fi

  # Choose what label to make defined by the system type(UEFI or legacy)
  if $UEFI; then
    parted -s "$DISK" mklabel gpt &> /dev/null
  else
    parted -s "$DISK" mklabel msdos &> /dev/null
  fi
  update_progress "5"

  # Partition creating, for UEFI systems, with swap memory check.
  if $UEFI; then
    BOOT_PART="${DISK}${PREFIX}1"
    ROOT_PART="${DISK}${PREFIX}2"
    if $swap_enabled; then
      SWAP_PART="${DISK}${PREFIX}3"
      sgdisk -n 1:0:+512M -n 2:0:-"$SWAP" -n 3:-"$SWAP":-0 \
        -t 1:ef00 -t 2:8300 -t 3:8200 "$DISK" &> /dev/null
      mkswap "$SWAP_PART" &> /dev/null
      swapon "$SWAP_PART"
    else
      sgdisk -n 1:0:+512M -n 2:0:0 -t 1:ef00 -t 2:8300 "$DISK" &> /dev/null
    fi
    mkfs.fat -F32 "$BOOT_PART" &> /dev/null
  # Partition creating, for LEGACY systems, with swap memory check.
  else
    ROOT_PART="${DISK}${PREFIX}1"
    if $swap_enabled; then
      SWAP_PART="${DISK}${PREFIX}2"
      echo -e "n\np\n1\n\n-${SWAP}\nn\np\n2\n\n\nt\n2\n82\nw" \
        | fdisk "$DISK" &> /dev/null
      mkswap "$SWAP_PART" &> /dev/null
      swapon "$SWAP_PART"
    else
      echo -e "n\np\n1\n\n\nw" | fdisk "$DISK" &> /dev/null
    fi
  fi
  update_progress "8"

  # Make the ext4 filesystem
  if ! mkfs."$FILE_SYSTEM" "$ROOT_PART" &> /dev/null; then
    error_exit "Failed to create filesystem on $ROOT_PART"
  fi
  update_progress "10"

  # Mount the disk to /mnt and commit that into the variable
  if ! mount "$ROOT_PART" /mnt; then
    error_exit "Failed to mount $ROOT_PART to /mnt"
  fi
  mounted=true
  update_progress "12"

  # If the system is UEFI enabled, the boot partition gets mounted
  if $UEFI; then
    mkdir /mnt/boot
    mount "$BOOT_PART" /mnt/boot
  fi

  # More variables
  bluetooth_enabled=false
  dm_enabled=false
  multilib=false
  DESKTOP_PACKAGES=()

  # If the system is UEFI enabled, add efibootmgr to the packages list
  if $UEFI; then
    DESKTOP_PACKAGES+=('efibootmgr')
  fi

  # If the system has bluetooth, install bluetooth packages
  if $bluetooth; then
        bluetooth_enabled=true
        DESKTOP_PACKAGES+=('bluez' 'bluez-utils' 'pulseaudio-bluetooth')
      fi

  # If the system has Intel graphics, install corresponding driver
    if [ "$hypervisor" = "none" ]; then
      if lspci | grep "VGA" | grep -iq "Intel"; then
        DESKTOP_PACKAGES+=('xf86-video-intel')
      fi
  # If the system has NVIDIA or ATI radeon, install corresponding drivers
      if lspci | grep "VGA" | grep -iq "NVIDIA"; then
        gpu_driver="NVIDIA"
        if [ "$gpu_driver" = "NVIDIA" ]; then
          gpu_pci_id=$(lspci -nn  | grep -ioP 'VGA.*NVIDIA.*\[\K[\w:]+' | sed 's/.*://')
          if grep -Fq "$gpu_pci_id" "$DIR"/hw-ids/nvidia_390_pci_ids; then
            DESKTOP_PACKAGES+=('nvidia-390xx' 'nvidia-390xx-utils' 'nvidia-390xx-settings')
          elif grep -Fq "$gpu_pci_id" "$DIR"/hw-ids/nvidia_340_pci_ids; then
            DESKTOP_PACKAGES+=('xf86-video-nouveau' 'mesa')
          else
            DESKTOP_PACKAGES+=('nvidia' 'nvidia-utils' 'nvidia-settings')
          fi
        else
          DESKTOP_PACKAGES+=('xf86-video-nouveau' 'mesa')
        fi
      elif lspci | grep "VGA" | grep -q "ATI\|AMD"; then
        gpu_driver="ATI"
        if [ "$gpu_driver" = "ATI" ]; then
          DESKTOP_PACKAGES+=('xf86-video-ati' 'mesa')
        else
          DESKTOP_PACKAGES+=('xf86-video-amdgpu' 'mesa')
        fi
      fi
    else
    # If the system is a VM, add VM speciffic packages to it
      case "$hypervisor" in
        "vmware") DESKTOP_PACKAGES+=('open-vm-tools' 'xf86-video-vmware' 'xf86-input-vmmouse' 'mesa' 'gtkmm' 'gtkmm3') ;;
        "oracle") DESKTOP_PACKAGES+=('virtualbox-guest-utils' 'virtualbox-guest-dkms') ;;
        "parallels") DESKTOP_PACKAGES+=('xf86-video-vesa') ;;
        *) DESKTOP_PACKAGES+=('xf86-video-fbdev') ;;
      esac
    fi
  update_progress "15"

  # adding pacman config directly
  mkdir -p /mnt/etc/
  cp /etc/pacman.conf /mnt/etc/pacman.conf
  update_progress "17"

  # Initialize and update pacman keyring BEFORE installing packages
  echo "Initializing pacman keyring..." >> /home/liveuser/Desktop/install.log
  pacman-key --init &> /dev/null || echo "Warning: keyring init failed" >> /home/liveuser/Desktop/install.log
  pacman-key --populate archlinux manjaro &> /dev/null || echo "Warning: keyring populate failed" >> /home/liveuser/Desktop/install.log
  pacman -Sy --noconfirm archlinux-keyring 2>&1 >> /home/liveuser/Desktop/install.log || echo "Warning: failed to update keyring package" >> /home/liveuser/Desktop/install.log
  # Refresh database to ensure package availability checks are accurate
  pacman -Sy --noconfirm &> /dev/null || true

  # Generate package availability report before installation
  REPORT_PATH="/home/liveuser/Desktop/packages-report.txt"
  : > "$REPORT_PATH"
  for package in "${BASE_PACKAGES[@]}"; do
    if pacman -Sp --noconfirm "$package" > /dev/null 2>&1; then
      printf "%-28s %s\n" "$package" "OK" >> "$REPORT_PATH"
    else
      printf "%-28s %s\n" "$package" "NOT_OK" >> "$REPORT_PATH"
    fi
  done
  update_progress "18"

  trap - ERR
  failed_packages=0
  total_packages=${#BASE_PACKAGES[@]}
  installed_packages=0
  
  # Progress calculation: 18% to 70% for package installation (52% range for all packages)
  for package in "${BASE_PACKAGES[@]}"; do
    if ! pacstrap /mnt "$package" 2>/dev/null; then
      echo "Warning: Failed to install $package" >> /home/liveuser/Desktop/install.log
      echo "FAILED: $package" >> /tmp/failed_packages.log
      ((failed_packages++))
    else
      ((installed_packages++))
    fi
    
    # Update progress: 18% + (installed_packages / total_packages) * 52%
    progress=$((18 + (installed_packages * 52 / total_packages)))
    update_progress "$progress"
  done
  
  trap 'error_exit "Unexpected error at line $LINENO"' ERR
  
  echo "Installed: $installed_packages/$total_packages packages" >> /home/liveuser/Desktop/install.log
  
  update_progress "70"

  # Generating fstab (without deprecated -p) and logging stderr to desktop
  if ! genfstab -U /mnt >> /mnt/etc/fstab 2>> /home/liveuser/Desktop/install.log; then
    error_exit "Failed to generate fstab"
  fi
  update_progress "72"

  # Pushing temporary Timezone to localtime file
  ln -sf /usr/share/zoneinfo/"$ZONE" /mnt/etc/localtime
  update_progress "74"

  # Enable or disable UTC time
  if $utc_enabled; then
    arch-chroot /mnt hwclock --systohc --utc
  else
    arch-chroot /mnt hwclock --systohc --localtime
  fi
  sed -i "s/#en_US.UTF-8/en_US.UTF-8/" /mnt/etc/locale.gen
  update_progress "76"

  # Passing custom locale to locale file
  if [ "$LOCALE" != "en_US.UTF-8" ]; then
    sed -i "s/#$LOCALE/$LOCALE/" /mnt/etc/locale.gen
  fi

  # making the language equal to the locale, and passing to locale.conf
  echo "LANG=$LOCALE" > /mnt/etc/locale.conf
  update_progress "78"

  # If there is a custom keymap, add it to the vconsole
  if [ "$KEYMAP" != "us" ]; then
    echo "KEYMAP=$KEYMAP" > /mnt/etc/vconsole.conf
    if [ "$DESKTOP" != "None" ]; then
        echo -e "Section \"InputClass\"\nIdentifier \"system-keyboard\"\nMatchIsKeyboard \"on\"\nOption \"XkbLayout\" \"$KEYMAP\"\nEndSection" > /mnt/etc/X11/xorg.conf.d/00-keyboard.conf
    fi
  fi

  # Comitting the locale settings
  arch-chroot /mnt locale-gen &> /dev/null
  update_progress "80"

  # Setting the hostname
  echo "$HOST_NAME" > /mnt/etc/hostname
  update_progress "82"

  # Adding localhost to hosts file
  echo -e "127.0.0.1\tlocalhost\n::1\t\tlocalhost\n127.0.1.1\t$HOST_NAME.localdomain\t$HOST_NAME" >> /mnt/etc/hosts
  update_progress "84"

  # Partition layout work:
  if [ "$PARTITION_LAYOUT" != "Basic" ]; then
    arch-chroot /mnt mkinitcpio -p linux617 &> /dev/null
    grep -q 'plymouth' /mnt/etc/mkinitcpio.conf || sed -i 's/^\(HOOKS=(\)/\1plymouth /' /mnt/etc/mkinitcpio.conf
    arch-chroot /mnt mkinitcpio -P &> /dev/null

  fi
  update_progress "86"

  # Install GRUB for EFI or Legacy platform
  if $UEFI; then
    if ! arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=pearOS --removable &> /dev/null; then
      error_exit "Failed to install GRUB (UEFI mode)"
    fi
  else
    if ! arch-chroot /mnt grub-install --target=i386-pc "$DISK" &> /dev/null; then
      error_exit "Failed to install GRUB (Legacy mode)"
    fi
  fi
  update_progress "88"

  # Change root password to "pear"
  arch-chroot /mnt chpasswd <<<"root:$root_passwd"
  update_progress "90"

  # Add post_install to autostart
  cp -r /usr/share/pearOS-installer/ /mnt/usr/share/
  cp -r /usr/share/pearOS-installer/general_bin/bin_post /mnt/usr/local/bin/bin_post
  chmod +x /mnt/usr/local/bin/bin_post

  echo "[Desktop Entry]" > /mnt/etc/skel/.config/autostart/xyz.pearos-post-install.desktop
  echo "Name=pearOS Post Install" >> /mnt/etc/skel/.config/autostart/xyz.pearos-post-install.desktop
  echo "Comment=Scripts for the after-install time" >> /mnt/etc/skel/.config/autostart/xyz.pearos-post-install.desktop
  echo "GenericName=PostInstall" >> /mnt/etc/skel/.config/autostart/xyz.pearos-post-install.desktop
  echo "Icon=nicec0re-logo" >> /mnt/etc/skel/.config/autostart/xyz.pearos-post-install.desktop
  echo "Categories=Utility;X-SuSE-DesktopUtility;" >> /mnt/etc/skel/.config/autostart/xyz.pearos-post-install.desktop
  echo "Exec=bash /usr/local/bin/bin_post" >> /mnt/etc/skel/.config/autostart/xyz.pearos-post-install.desktop
  echo "Terminal=false" >> /mnt/etc/skel/.config/autostart/xyz.pearos-post-install.desktop
  echo "Type=Application" >> /mnt/etc/skel/.config/autostart/xyz.pearos-post-install.desktop
  echo "X-DBUS-ServiceName=xyz.pearos-post-install" >> /mnt/etc/skel/.config/autostart/xyz.pearos-post-install.desktop
  echo "X-DBUS-StartupType=unique" >> /mnt/etc/skel/.config/autostart/xyz.pearos-post-install.desktop
  echo "X-KDE-PluginInfo-Author=Alexandru Balan" >> /mnt/etc/skel/.config/autostart/xyz.pearos-post-install.desktop
  echo "X-KDE-PluginInfo-Email=alxb421@gmail.com" >> /mnt/etc/skel/.config/autostart/xyz.pearos-post-install.desktop
  echo "X-KDE-PluginInfo-Version=22.03" >> /mnt/etc/skel/.config/autostart/xyz.pearos-post-install.desktop

  # Add "default" user to wheel and sudoers, and make the system not to ask sudo password for user 'default'
  arch-chroot /mnt useradd -m -g users -G wheel -s /bin/bash "default"
  arch-chroot /mnt chpasswd <<<"$USER_NAME:$user_passwd"
  arch-chroot /mnt usermod -aG wheel default
  # arch-chroot /mnt usermod -aG sudo default
  sed -i 's/# %wheel ALL=(ALL) ALL$/%wheel ALL=(ALL) ALL/' /mnt/etc/sudoers
  echo "default ALL=(ALL) NOPASSWD:ALL" >> /mnt/etc/sudoers
  update_progress "92"

  # Adding pacman to conf and updating packages list
  cp /etc/pacman.conf /mnt/etc/pacman.conf
  arch-chroot /mnt pacman -Sy --quiet --noconfirm 2>/dev/null || true
  update_progress "93"

  # Setting pearOS plymouth theme
  arch-chroot /mnt plymouth-set-default-theme -R pear-plymouth 2>/dev/null || echo "Warning: Failed to set plymouth theme" >> /home/liveuser/Desktop/install.log

  # Enable Network Manager, vbox additions and SDDM services
  arch-chroot /mnt systemctl enable NetworkManager.service &> /dev/null
  arch-chroot /mnt systemctl enable sddm.service &> /dev/null
  update_progress "94"

  # Enabling auto-login for 'default' user :
  echo "[Autologin]" > /mnt/etc/sddm.conf
  echo "User=default" >> /mnt/etc/sddm.conf
  echo "Session=plasma.desktop" >> /mnt/etc/sddm.conf
  update_progress "95"

  # Enable bluetooth addons if needed
  if $bluetooth_enabled; then
    arch-chroot /mnt systemctl enable bluetooth.service &> /dev/null
  fi

  # Fix extras files permissions (fixes the theme-switcher bug
  chmod -R 0777 /mnt/usr/share/extras
  update_progress "96"

  # Install pearOS boot chime
  arch-chroot /mnt git clone https://github.com/Pear-Project/pearos-boot-sound.git 2>/dev/null || true
  if [ -d /mnt/pearos-boot-sound ]; then
    arch-chroot /mnt chmod +x pearos-boot-sound/install.sh
    arch-chroot /mnt ./pearos-boot-sound/install.sh 2>/dev/null || echo "Warning: Failed to install boot chime" >> /home/liveuser/Desktop/install.log
  fi
  update_progress "97"

  # Check if the user installs pearOS in a VM, if yes, which, then enabled corresponding services
#  if [ "$hypervisor" != "none" ]; then
#    if [ "$hypervisor" = "oracle" ]; then
#      arch-chroot /mnt systemctl enable vboxservice.service &> /dev/null
#      update_progress "98"
#    elif [ "$hypervisor" = "vmware" ]; then
#      arch-chroot /mnt systemctl enable vmtoolsd.service &> /dev/null
#      arch-chroot /mnt systemctl enable vmware-vmblock-fuse.service &> /dev/null
#      update_progress "98"
#    fi
#  else
    update_progress "98"
#  fi

    # Add the grub theme to the configuration file
  echo "GRUB_THEME=\"/usr/share/grub/themes/pearOS/theme.txt\"" >> /mnt/etc/default/grub
  sudo sed -i 's|^GRUB_CMDLINE_LINUX=.*|GRUB_CMDLINE_LINUX="quiet splash loglevel=3"|' /mnt/etc/default/grub

  if ! arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg &> /dev/null; then
    error_exit "Failed to generate GRUB configuration"
  fi

  update_progress "99"
  rm -rf /mnt/usr/share/applications/assistant.desktop /mnt/usr/share/applications/qdbusviewer.desktop /mnt/usr/share/applications/linguist.desktop /mnt/usr/share/applications/designer.desktop /mnt/usr/share/applications/linguist.desktop /mnt/usr/share/applications/lstopo.desktop /mnt/usr/share/applications/linguist.desktop /mnt/usr/share/applications/kvantummanager.desktop /mnt/usr/share/applications/org.kde.drkonqi.coredump.gui.desktop /mnt/usr/share/applications/electron38.desktop /mnt/usr/share/applications/org.kde.plasma.emojier.desktop /mnt/usr/share/applications/kde_wacom_tabletfinder.desktop
  arch-chroot /mnt pacman -R --noconfirm plasma-welcome

  # Sends the install finished messages to the frontend
  if [ -f /tmp/failed_packages.log ]; then
    failed_count=$(wc -l < /tmp/failed_packages.log)
    echo "Installation finished with $failed_count warnings" | tr -d '\n' > /tmp/progress
  else
    echo "Installation finished" | tr -d '\n' > /tmp/progress
  fi

  # Not sure if I keep this or not. Looks useless to me :shrug:
  check_mountpoints() {
    if mountpoint -q /mnt; then
      umount -R /mnt
    fi
    if free | awk '/^Swap:/ {exit !$2}'; then
      swapoff -a
    fi
  }

#!/bin/bash

# Copyright (c) Alexandru Balan under the PearProject.
# This file is part of the pearOS installer and it is
# released under the PearPublic License v2. Read more
# about this license on github.com/Pear-Project.
#
# To be honest, I could do this in C but for the
# sake of ease, I wanted something with no deps
# and no compile (for those who will say
# "bUt YoU CoULd uSe PyThOn" -> I said no deps.
# Thank you for using pearOS. Or at least
# trying to.

i=1
f=1

# Finding which are the USB drives in order to exclude them later :)
  typeset -a usbDevices
  typeset -a devices
  getDeviceType() {
    typeset deviceName=/sys/block/${1#/dev/}
    typeset deviceType=$(udevadm info --query=property --path="$deviceName" | grep -Po 'ID_BUS=\K\w+')
    echo "$deviceType"
  }
  mapfile -t devices < <(lsblk -o NAME,TYPE | grep --color=never -oP '^\K\w+(?=\s+disk$)')
  for device in "${devices[0]}" ; do
    if [ "$(getDeviceType "/dev/$device")" == "usb" ]; then
      usbDevices+=("/dev/$device")
    fi
  done
 set +u
 usbToExclude=$usbDevices
 if [ -z $usbToExclude ]
  then
       usbToExclude="/dev/null"
 fi

# Saving each device into it's variable name (step counting the devices, by number)
for device in $(lsblk -d -n -p -r -e 7,11 -o NAME | grep -v $usbToExclude); do
  disk[$i]="$device"
  ((i=i+1))
  ((count=count+1))
done

# Saving each device's size into it's variable name
for device in $(lsblk -d -n -p -r -e 7,11 -o NAME); do
  device_size=$(lsblk -d -n -r -o SIZE "$device")
  size[$f]="$device_size"
  ((f=f+1))
done


case $1 in
	"count") echo $count | tr -d '\n'
	;;
	"size") if [[ $2 > $count  ]] ; then echo "999" ; else printf '%s\n' "${size[$2]}" | tr -d '\n' ; fi
	;;
	"name") 
		if [[ $2 > $count ]] ; then 
			echo "Unknown" 
		else 
			# Obține modelul discului
			disk_path="${disk[$2]}"
			disk_model=$(lsblk -d -n -o MODEL "$disk_path" 2>/dev/null | xargs)
			disk_size=$(lsblk -d -n -o SIZE "$disk_path" 2>/dev/null | xargs)
			
			# Dacă nu există model, folosește numele dispozitivului
			if [ -z "$disk_model" ] || [ "$disk_model" = "Unknown" ]; then
				disk_name=$(basename "$disk_path")
				echo "$disk_size $disk_name" | tr -d '\n'
			else
				echo "$disk_size $disk_model" | tr -d '\n'
			fi
		fi
	;;
	"test") echo -e "$1 $2 $3 $4"
	;;
	*) if [[ $@ > $count  ]] ; then echo "999" ; else printf '%s\n' "${disk[$@]}" | tr -d '\n' ; fi
esac
